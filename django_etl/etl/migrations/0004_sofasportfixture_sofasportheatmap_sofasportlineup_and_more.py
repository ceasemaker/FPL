# Generated by Django 4.2.16 on 2025-10-05 22:24

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('etl', '0003_add_performance_indexes'),
    ]

    operations = [
        migrations.CreateModel(
            name='SofasportFixture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sofasport_event_id', models.BigIntegerField(db_index=True, help_text='SofaSport event ID', unique=True)),
                ('sofasport_home_team_id', models.BigIntegerField(help_text='SofaSport home team ID')),
                ('sofasport_away_team_id', models.BigIntegerField(help_text='SofaSport away team ID')),
                ('start_timestamp', models.BigIntegerField(blank=True, help_text='Unix timestamp from API', null=True)),
                ('kickoff_time', models.DateTimeField(blank=True, help_text='Converted datetime', null=True)),
                ('match_status', models.CharField(blank=True, help_text='Status type (finished, inprogress, etc)', max_length=50, null=True)),
                ('home_score_current', models.IntegerField(blank=True, null=True)),
                ('away_score_current', models.IntegerField(blank=True, null=True)),
                ('home_score_period1', models.IntegerField(blank=True, null=True)),
                ('away_score_period1', models.IntegerField(blank=True, null=True)),
                ('home_score_period2', models.IntegerField(blank=True, null=True)),
                ('away_score_period2', models.IntegerField(blank=True, null=True)),
                ('home_formation', models.CharField(blank=True, help_text="Team formation (e.g., '4-3-3')", max_length=20, null=True)),
                ('away_formation', models.CharField(blank=True, help_text="Team formation (e.g., '4-3-3')", max_length=20, null=True)),
                ('has_xg', models.BooleanField(default=False, help_text='Whether xG data is available')),
                ('has_player_statistics', models.BooleanField(default=False, help_text='Whether player stats are available')),
                ('has_heatmap', models.BooleanField(default=False, help_text='Whether heatmap data is available')),
                ('lineups_confirmed', models.BooleanField(default=False, help_text='Whether lineups are confirmed')),
                ('raw_data', models.JSONField(default=dict, help_text='Full SofaSport fixture data')),
            ],
            options={
                'db_table': 'sofasport_fixtures',
                'ordering': ['-kickoff_time'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SofasportHeatmap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sofasport_player_id', models.BigIntegerField(db_index=True, help_text='SofaSport player ID')),
                ('coordinates', models.JSONField(default=list, help_text='Array of heatmap coordinates [{x: int, y: int}, ...] from API')),
                ('point_count', models.IntegerField(default=0, help_text='Number of coordinate points')),
            ],
            options={
                'db_table': 'sofasport_heatmaps',
                'ordering': ['fixture', 'athlete'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SofasportLineup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sofasport_player_id', models.BigIntegerField(db_index=True, help_text='SofaSport player ID')),
                ('sofasport_team_id', models.BigIntegerField(help_text='SofaSport team ID from lineup')),
                ('position', models.CharField(blank=True, help_text='Player position (G, D, M, F)', max_length=10, null=True)),
                ('shirt_number', models.IntegerField(blank=True, null=True)),
                ('substitute', models.BooleanField(default=False, help_text='Whether player started on the bench')),
                ('minutes_played', models.IntegerField(blank=True, help_text='Minutes played from statistics', null=True)),
                ('statistics', models.JSONField(default=dict, help_text='Full player statistics dict from lineup API (rating, passes, shots, etc.)')),
                ('player_name', models.CharField(help_text='Player name from SofaSport', max_length=200)),
                ('player_slug', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'db_table': 'sofasport_lineups',
                'ordering': ['fixture', 'team', '-substitute', 'shirt_number'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SofasportPlayerSeasonStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('sofasport_player_id', models.BigIntegerField(db_index=True, help_text='SofaSport player ID')),
                ('sofasport_team_id', models.BigIntegerField(help_text='SofaSport team ID')),
                ('season_id', models.CharField(default='76986', help_text="Season ID (e.g., '76986' for 2025/26)", max_length=50)),
                ('category', models.CharField(blank=True, help_text="Stat category (e.g., 'attacking', 'defensive', 'passing', 'goalkeeper')", max_length=50, null=True)),
                ('display_stats', models.BooleanField(default=True, help_text='Whether to display these stats in the frontend')),
                ('rating', models.DecimalField(blank=True, decimal_places=2, help_text='Average rating', max_digits=4, null=True)),
                ('total_rating', models.DecimalField(blank=True, decimal_places=2, help_text='Sum of ratings', max_digits=8, null=True)),
                ('count_rating', models.IntegerField(blank=True, help_text='Number of rated appearances', null=True)),
                ('minutes_played', models.IntegerField(blank=True, help_text='Total minutes played', null=True)),
                ('appearances', models.IntegerField(blank=True, help_text='Number of appearances', null=True)),
                ('goals', models.IntegerField(blank=True, null=True)),
                ('assists', models.IntegerField(blank=True, null=True)),
                ('expected_assists', models.DecimalField(blank=True, decimal_places=2, help_text='xA limited to 2 decimals', max_digits=10, null=True)),
                ('big_chances_created', models.IntegerField(blank=True, null=True)),
                ('big_chances_missed', models.IntegerField(blank=True, null=True)),
                ('total_shots', models.IntegerField(blank=True, null=True)),
                ('shots_on_target', models.IntegerField(blank=True, null=True)),
                ('accurate_passes', models.IntegerField(blank=True, null=True)),
                ('total_passes', models.IntegerField(blank=True, null=True)),
                ('accurate_passes_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('key_passes', models.IntegerField(blank=True, null=True)),
                ('accurate_long_balls', models.IntegerField(blank=True, null=True)),
                ('accurate_long_balls_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('tackles', models.IntegerField(blank=True, null=True)),
                ('interceptions', models.IntegerField(blank=True, null=True)),
                ('clearances', models.IntegerField(blank=True, null=True)),
                ('total_duels_won', models.IntegerField(blank=True, null=True)),
                ('total_duels_won_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('aerial_duels_won', models.IntegerField(blank=True, null=True)),
                ('ground_duels_won', models.IntegerField(blank=True, null=True)),
                ('yellow_cards', models.IntegerField(blank=True, null=True)),
                ('red_cards', models.IntegerField(blank=True, null=True)),
                ('fouls', models.IntegerField(blank=True, null=True)),
                ('was_fouled', models.IntegerField(blank=True, null=True)),
                ('saves', models.IntegerField(blank=True, null=True)),
                ('saves_percentage', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('clean_sheets', models.IntegerField(blank=True, null=True)),
                ('goals_conceded', models.IntegerField(blank=True, null=True)),
                ('statistics', models.JSONField(default=dict, help_text='Complete season statistics from API (60+ fields)')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='When stats were last fetched')),
            ],
            options={
                'db_table': 'sofasport_player_season_stats',
                'ordering': ['-rating', 'athlete'],
                'abstract': False,
            },
        ),
        migrations.RenameIndex(
            model_name='athlete',
            new_name='athletes_total_p_7823c1_idx',
            old_name='athletes_total_p_idx',
        ),
        migrations.RenameIndex(
            model_name='athlete',
            new_name='athletes_element_4f511d_idx',
            old_name='athletes_elem_ty_idx',
        ),
        migrations.RenameIndex(
            model_name='athlete',
            new_name='athletes_element_a7ad43_idx',
            old_name='athletes_elem_pt_idx',
        ),
        migrations.RenameIndex(
            model_name='fixture',
            new_name='fixtures_event_49a267_idx',
            old_name='fixtures_event_idx',
        ),
        migrations.RenameIndex(
            model_name='fixture',
            new_name='fixtures_team_h_5310c3_idx',
            old_name='fixtures_team_h_idx',
        ),
        migrations.RenameIndex(
            model_name='fixture',
            new_name='fixtures_team_a_9d4fbd_idx',
            old_name='fixtures_team_a_idx',
        ),
        migrations.AddIndex(
            model_name='athlete',
            index=models.Index(fields=['team'], name='athletes_team_c711f6_idx'),
        ),
        migrations.AddField(
            model_name='sofasportplayerseasonstats',
            name='athlete',
            field=models.ForeignKey(help_text='Link to FPL athlete', on_delete=django.db.models.deletion.CASCADE, related_name='sofasport_season_stats', to='etl.athlete'),
        ),
        migrations.AddField(
            model_name='sofasportplayerseasonstats',
            name='team',
            field=models.ForeignKey(blank=True, help_text='FPL team', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sofasport_player_season_stats', to='etl.team'),
        ),
        migrations.AddField(
            model_name='sofasportlineup',
            name='athlete',
            field=models.ForeignKey(help_text='Link to FPL athlete', on_delete=django.db.models.deletion.CASCADE, related_name='sofasport_lineups', to='etl.athlete'),
        ),
        migrations.AddField(
            model_name='sofasportlineup',
            name='fixture',
            field=models.ForeignKey(help_text='Link to SofaSport fixture', on_delete=django.db.models.deletion.CASCADE, related_name='lineups', to='etl.sofasportfixture'),
        ),
        migrations.AddField(
            model_name='sofasportlineup',
            name='team',
            field=models.ForeignKey(help_text='FPL team', on_delete=django.db.models.deletion.CASCADE, related_name='sofasport_lineups', to='etl.team'),
        ),
        migrations.AddField(
            model_name='sofasportheatmap',
            name='athlete',
            field=models.ForeignKey(help_text='Link to FPL athlete', on_delete=django.db.models.deletion.CASCADE, related_name='sofasport_heatmaps', to='etl.athlete'),
        ),
        migrations.AddField(
            model_name='sofasportheatmap',
            name='fixture',
            field=models.ForeignKey(help_text='Link to SofaSport fixture', on_delete=django.db.models.deletion.CASCADE, related_name='heatmaps', to='etl.sofasportfixture'),
        ),
        migrations.AddField(
            model_name='sofasportheatmap',
            name='lineup',
            field=models.OneToOneField(blank=True, help_text='Link to lineup entry', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='heatmap', to='etl.sofasportlineup'),
        ),
        migrations.AddField(
            model_name='sofasportfixture',
            name='away_team',
            field=models.ForeignKey(blank=True, help_text='FPL away team', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sofasport_away_fixtures', to='etl.team'),
        ),
        migrations.AddField(
            model_name='sofasportfixture',
            name='fixture',
            field=models.ForeignKey(help_text='Link to FPL fixture', on_delete=django.db.models.deletion.CASCADE, related_name='sofasport_fixtures', to='etl.fixture'),
        ),
        migrations.AddField(
            model_name='sofasportfixture',
            name='home_team',
            field=models.ForeignKey(blank=True, help_text='FPL home team', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sofasport_home_fixtures', to='etl.team'),
        ),
        migrations.AddIndex(
            model_name='sofasportplayerseasonstats',
            index=models.Index(fields=['athlete'], name='sofasport_p_athlete_a70e01_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportplayerseasonstats',
            index=models.Index(fields=['team'], name='sofasport_p_team_id_d79cc5_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportplayerseasonstats',
            index=models.Index(fields=['season_id'], name='sofasport_p_season__5d3aba_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportplayerseasonstats',
            index=models.Index(fields=['sofasport_player_id'], name='sofasport_p_sofaspo_d71dce_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportplayerseasonstats',
            index=models.Index(fields=['-rating'], name='sofasport_p_rating_e6905a_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportplayerseasonstats',
            index=models.Index(fields=['-goals'], name='sofasport_p_goals_9b8ce0_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportplayerseasonstats',
            index=models.Index(fields=['-assists'], name='sofasport_p_assists_763101_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sofasportplayerseasonstats',
            unique_together={('athlete', 'season_id')},
        ),
        migrations.AddIndex(
            model_name='sofasportlineup',
            index=models.Index(fields=['athlete'], name='sofasport_l_athlete_94d3b3_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportlineup',
            index=models.Index(fields=['fixture'], name='sofasport_l_fixture_98b632_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportlineup',
            index=models.Index(fields=['team'], name='sofasport_l_team_id_f0f5ab_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportlineup',
            index=models.Index(fields=['sofasport_player_id'], name='sofasport_l_sofaspo_61bd2e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sofasportlineup',
            unique_together={('athlete', 'fixture')},
        ),
        migrations.AddIndex(
            model_name='sofasportheatmap',
            index=models.Index(fields=['athlete'], name='sofasport_h_athlete_ad5a9c_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportheatmap',
            index=models.Index(fields=['fixture'], name='sofasport_h_fixture_722968_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportheatmap',
            index=models.Index(fields=['sofasport_player_id'], name='sofasport_h_sofaspo_0253d2_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sofasportheatmap',
            unique_together={('athlete', 'fixture')},
        ),
        migrations.AddIndex(
            model_name='sofasportfixture',
            index=models.Index(fields=['fixture'], name='sofasport_f_fixture_d7d23c_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportfixture',
            index=models.Index(fields=['home_team'], name='sofasport_f_home_te_20d20b_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportfixture',
            index=models.Index(fields=['away_team'], name='sofasport_f_away_te_45f4e9_idx'),
        ),
        migrations.AddIndex(
            model_name='sofasportfixture',
            index=models.Index(fields=['match_status'], name='sofasport_f_match_s_23e3e8_idx'),
        ),
    ]
