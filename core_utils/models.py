from sqlalchemy import (
    Column, Integer, String, Boolean, Numeric, Date, Text, ForeignKey, UniqueConstraint, TIMESTAMP
)
from sqlalchemy.orm import relationship, declarative_base


Base = declarative_base()

class Team(Base):
    __tablename__ = 'teams'
    id = Column(Integer, primary_key=True)
    code = Column(Integer, unique=True)
    name = Column(String(255), nullable=False)
    short_name = Column(String(10))
    strength = Column(Integer)
    played = Column(Integer, default=0)
    win = Column(Integer, default=0)
    draw = Column(Integer, default=0)
    loss = Column(Integer, default=0)
    points = Column(Integer, default=0)
    position = Column(Integer)
    form = Column(String(50))
    unavailable = Column(Boolean, default=False)
    strength_overall_home = Column(Integer)
    strength_overall_away = Column(Integer)
    strength_attack_home = Column(Integer)
    strength_attack_away = Column(Integer)
    strength_defence_home = Column(Integer)
    strength_defence_away = Column(Integer)
    team_division = Column(Integer)
    pulse_id = Column(Integer)

    athletes = relationship("Athlete", back_populates="team_obj", foreign_keys="Athlete.team")

class Athlete(Base):
    __tablename__ = 'athletes'
    id = Column(Integer, primary_key=True)
    can_transact = Column(Boolean)
    can_select = Column(Boolean)
    chance_of_playing_next_round = Column(Integer)
    chance_of_playing_this_round = Column(Integer)
    code = Column(Integer, unique=True)
    cost_change_event = Column(Integer)
    cost_change_event_fall = Column(Integer)
    cost_change_start = Column(Integer)
    cost_change_start_fall = Column(Integer)
    dreamteam_count = Column(Integer)
    element_type = Column(Integer)
    ep_next = Column(Numeric(5, 2))
    ep_this = Column(Numeric(5, 2))
    event_points = Column(Integer)
    first_name = Column(String(255))
    form = Column(Numeric(5, 2))
    in_dreamteam = Column(Boolean)
    news = Column(Text)
    news_added = Column(TIMESTAMP(timezone=True))
    now_cost = Column(Integer)
    photo = Column(String(255))
    points_per_game = Column(Numeric(5, 2))
    removed = Column(Boolean, default=False)
    second_name = Column(String(255))
    selected_by_percent = Column(Numeric(5, 2))
    special = Column(Boolean)
    squad_number = Column(Integer)
    status = Column(String(10))
    team = Column(Integer, ForeignKey('teams.id'))
    team_code = Column(Integer, ForeignKey('teams.code', ondelete="SET NULL", onupdate="CASCADE"))
    total_points = Column(Integer)
    transfers_in = Column(Integer)
    transfers_in_event = Column(Integer)
    transfers_out = Column(Integer)
    transfers_out_event = Column(Integer)
    value_form = Column(Numeric(5, 2))
    value_season = Column(Numeric(5, 2))
    web_name = Column(String(255))
    region = Column(Integer)
    team_join_date = Column(Date)
    birth_date = Column(Date)
    has_temporary_code = Column(Boolean)
    opta_code = Column(String(50))
    minutes = Column(Integer)
    goals_scored = Column(Integer)
    assists = Column(Integer)
    clean_sheets = Column(Integer)
    goals_conceded = Column(Integer)
    own_goals = Column(Integer)
    penalties_saved = Column(Integer)
    penalties_missed = Column(Integer)
    yellow_cards = Column(Integer)
    red_cards = Column(Integer)
    saves = Column(Integer)
    bonus = Column(Integer)
    bps = Column(Integer)
    influence = Column(Numeric(10, 2))
    creativity = Column(Numeric(10, 2))
    threat = Column(Numeric(10, 2))
    ict_index = Column(Numeric(10, 2))
    starts = Column(Integer)
    expected_goals = Column(Numeric(10, 3))
    expected_assists = Column(Numeric(10, 3))
    expected_goal_involvements = Column(Numeric(10, 3))
    expected_goals_conceded = Column(Numeric(10, 3))
    mng_win = Column(Integer)
    mng_draw = Column(Integer)
    mng_loss = Column(Integer)
    mng_underdog_win = Column(Integer)
    mng_underdog_draw = Column(Integer)
    mng_clean_sheets = Column(Integer)
    mng_goals_scored = Column(Integer)
    influence_rank = Column(Integer)
    influence_rank_type = Column(Integer)
    creativity_rank = Column(Integer)
    creativity_rank_type = Column(Integer)
    threat_rank = Column(Integer)
    threat_rank_type = Column(Integer)
    ict_index_rank = Column(Integer)
    ict_index_rank_type = Column(Integer)
    corners_and_indirect_freekicks_order = Column(Integer)
    corners_and_indirect_freekicks_text = Column(Text)
    direct_freekicks_order = Column(Integer)
    direct_freekicks_text = Column(Text)
    penalties_order = Column(Integer)
    penalties_text = Column(Text)
    expected_goals_per_90 = Column(Numeric(10, 3))
    saves_per_90 = Column(Numeric(10, 3))
    expected_assists_per_90 = Column(Numeric(10, 3))
    expected_goal_involvements_per_90 = Column(Numeric(10, 3))
    expected_goals_conceded_per_90 = Column(Numeric(10, 3))
    goals_conceded_per_90 = Column(Numeric(10, 3))
    now_cost_rank = Column(Integer)
    now_cost_rank_type = Column(Integer)
    form_rank = Column(Integer)
    form_rank_type = Column(Integer)
    points_per_game_rank = Column(Integer)
    points_per_game_rank_type = Column(Integer)
    selected_rank = Column(Integer)
    selected_rank_type = Column(Integer)
    starts_per_90 = Column(Numeric(10, 3))
    clean_sheets_per_90 = Column(Numeric(10, 3))

    team_obj = relationship("Team", back_populates="athletes", foreign_keys=[team])
    stats = relationship("AthleteStats", back_populates="athlete")

class AthleteStats(Base):
    __tablename__ = 'athlete_stats'
    id = Column(Integer, ForeignKey('athletes.id', ondelete="CASCADE", onupdate="CASCADE"), primary_key=True)
    game_week = Column(Integer, primary_key=True)
    minutes = Column(Integer, default=0)
    goals_scored = Column(Integer, default=0)
    assists = Column(Integer, default=0)
    clean_sheets = Column(Integer, default=0)
    goals_conceded = Column(Integer, default=0)
    own_goals = Column(Integer, default=0)
    penalties_saved = Column(Integer, default=0)
    penalties_missed = Column(Integer, default=0)
    yellow_cards = Column(Integer, default=0)
    red_cards = Column(Integer, default=0)
    saves = Column(Integer, default=0)
    bonus = Column(Integer, default=0)
    bps = Column(Integer, default=0)
    influence = Column(Numeric(10, 2), default=0.0)
    creativity = Column(Numeric(10, 2), default=0.0)
    threat = Column(Numeric(10, 2), default=0.0)
    ict_index = Column(Numeric(10, 2), default=0.0)
    starts = Column(Integer, default=0)
    expected_goals = Column(Numeric(10, 3), default=0.00)
    expected_assists = Column(Numeric(10, 3), default=0.00)
    expected_goal_involvements = Column(Numeric(10, 3), default=0.00)
    expected_goals_conceded = Column(Numeric(10, 3), default=0.00)
    mng_win = Column(Integer, default=0)
    mng_draw = Column(Integer, default=0)
    mng_loss = Column(Integer, default=0)
    mng_underdog_win = Column(Integer, default=0)
    mng_underdog_draw = Column(Integer, default=0)
    mng_clean_sheets = Column(Integer, default=0)
    mng_goals_scored = Column(Integer, default=0)
    total_points = Column(Integer, default=0)
    in_dreamteam = Column(Boolean, default=False)

    athlete = relationship("Athlete", back_populates="stats")